"use strict";
class Animal1 {
    makeSound() {
        console.log('Some generic animal sound.');
    }
}
class Dog1 extends Animal1 {
    // Parent class method override ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    makeSound() {
        console.log('Dog barks.');
    }
}
const myDog1 = new Dog1();
myDog1.makeSound(); // Output: Dog barks.
console.log('================================================');
// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß®: super ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá Parent Class-‡¶è‡¶∞ Method ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
class Animal2 {
    makeSound() {
        console.log('Some generic animal sound.');
    }
}
class Dog2 extends Animal2 {
    makeSound() {
        // Parent class-‡¶è‡¶∞ method ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
        super.makeSound();
        console.log('Dog barks.');
    }
}
const myDog2 = new Dog2();
console.log('üöÄ ~ myDog2:', myDog2);
myDog2.makeSound();
// Output:
// Some generic animal sound.
// Dog barks.
console.log('================================================');
// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß©: Constructor-‡¶∏‡¶π Method Overriding
/*
    age?: number: ? ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¶‡¶ø‡ßü‡ßá age-‡¶ï‡ßá optional ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã,
    age ‡¶Ü‡¶∞‡ßç‡¶ó‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶®‡¶æ‡¶ì ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶®‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø undefined ‡¶π‡¶¨‡ßá‡•§

 */
class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
        // Optional parameter age, ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º ‡¶§‡¶æ‡¶π‡¶≤‡ßá undefined ‡¶π‡¶¨‡ßá‡•§
    }
    greet() {
        console.log(`Hello, my name is ${this.name}.`);
        if (this.age !== undefined) {
            console.log(`I am ${this.age} years old.`);
        }
    }
}
class Student extends Person {
    constructor(name, grade) {
        super(name); // Parent class constructor ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ, age ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ
        this.grade = grade;
    }
}
const student1 = new Student('John', 10);
student1.greet(); // Output: Hello, my name is John.
const student2 = new Person('Jane', 25);
student2.greet(); // Output: Hello, my name is Jane. I am 25 years old.
console.log('================= Access Modifiers ===============================');
// ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡ß™: Access Modifiers ‡¶∏‡¶π Method Overriding
class Vehicle {
    startEngine() {
        console.log('Engine started.');
    }
}
class Car3 extends Vehicle {
    startEngine() {
        console.log('Checking car systems...');
        super.startEngine(); // Parent class-‡¶è‡¶∞ method
        console.log('Car engine is now running.');
    }
}
const myCar3 = new Car3();
myCar3.startEngine();
// Output:
// Checking car systems...
// Engine started.
// Car engine is now running.
